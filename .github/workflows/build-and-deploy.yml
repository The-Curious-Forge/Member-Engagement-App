name: Build and Deploy

on:
  push:
    branches: [main, live]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/live' }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/frontend
          file: ./packages/frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/live' }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/backend
          file: ./packages/backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/live' && github.event_name == 'push'

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          envs: GITHUB_TOKEN,GITHUB_ACTOR,GITHUB_REPOSITORY
          script: |
            echo "Starting deployment..."
            cd /opt/member-engagement-app || { echo "Application directory not found"; exit 1; }

            echo "Pulling latest code from live branch..."
            git pull origin live

            echo "Logging into GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            echo "Using latest images from live branch (no custom tags)..."
            echo "Copying production docker-compose and setting variables..."

            # Convert repository name to lowercase for Docker compatibility
            export GITHUB_REPOSITORY_LOWER=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
            export IMAGE_TAG="latest"

            # Use envsubst to properly substitute environment variables
            envsubst < docker-compose.prod.yml > docker-compose.deploy.yml

            echo "Images that will be used:"
            grep "image:" docker-compose.deploy.yml

            echo "Stopping existing containers..."
            docker-compose -f docker-compose.deploy.yml down

            echo "Removing old images to force fresh pull..."
            docker image rm "ghcr.io/$GITHUB_REPOSITORY_LOWER-frontend:latest" 2>/dev/null || true
            docker image rm "ghcr.io/$GITHUB_REPOSITORY_LOWER-backend:latest" 2>/dev/null || true

            echo "Pulling latest Docker images..."
            docker-compose -f docker-compose.deploy.yml pull

            echo "Starting services with fresh images..."
            docker-compose -f docker-compose.deploy.yml up -d

            echo "Waiting for services to be ready..."
            sleep 15

            echo "Verifying deployment..."
            docker-compose -f docker-compose.deploy.yml ps

            echo "Cleaning up deployment file..."
            rm docker-compose.deploy.yml

            echo "Cleaning up unused Docker resources..."
            docker system prune -f

            echo "Logging out of GitHub Container Registry..."
            docker logout ghcr.io

            echo "Deployment completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
