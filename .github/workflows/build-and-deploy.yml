name: Build and Deploy

on:
  push:
    branches: [main, live]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      force_deploy: ${{ steps.check-branch.outputs.force_deploy }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if this is a live branch push
        id: check-branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/live" && "${{ github.event_name }}" == "push" ]]; then
            echo "force_deploy=true" >> $GITHUB_OUTPUT
            echo "Live branch push detected - forcing build of all components"
          else
            echo "force_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'packages/frontend/**'
              - '.github/workflows/**'
              - 'docker-compose.prod.yml'
              - '.env.example'
            backend:
              - 'packages/backend/**'
              - '.github/workflows/**'
              - 'docker-compose.prod.yml'

  build-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.force_deploy == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/live' }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/frontend
          file: ./packages/frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ github.ref == 'refs/heads/live' }}
          provenance: false
          sbom: false

  build-backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.force_deploy == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/live' }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/backend
          file: ./packages/backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ github.ref == 'refs/heads/live' }}
          provenance: false
          sbom: false

  deploy:
    needs: [changes, build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/live' && github.event_name == 'push' && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') && (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped')

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          envs: GITHUB_TOKEN,GITHUB_ACTOR,GITHUB_REPOSITORY,AIRTABLE_API_KEY,AIRTABLE_BASE_ID,GOOGLE_API_KEY,GOOGLE_CALENDAR_ID,NODE_ENV
          script: |
            echo "Starting simplified deployment..."
            cd /opt/member-engagement-app || { echo "Application directory not found"; exit 1; }

            echo "Pulling latest code from live branch..."
            git pull origin live

            echo "Creating .env file with all deployment variables from GitHub Secrets..."
            cat > .env << EOF
            # Generated automatically from GitHub Secrets during deployment
            # Do not modify this file manually - use GitHub repository secrets instead

            # Docker Configuration
            GITHUB_REPOSITORY_LOWER=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG=latest

            # Airtable Configuration
            AIRTABLE_API_KEY=$AIRTABLE_API_KEY
            AIRTABLE_BASE_ID=$AIRTABLE_BASE_ID

            # Google API Configuration
            GOOGLE_API_KEY=$GOOGLE_API_KEY
            GOOGLE_CALENDAR_ID=$GOOGLE_CALENDAR_ID

            # Node Environment
            NODE_ENV=$NODE_ENV
            EOF

            echo "Logging into GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            echo "Pulling latest Docker images..."
            docker-compose -f docker-compose.prod.yml pull

            echo "Stopping current services..."
            docker-compose -f docker-compose.prod.yml down

            echo "Starting services with updated images..."
            docker-compose -f docker-compose.prod.yml up -d

            echo "Waiting for services to be ready..."
            sleep 15

            echo "Verifying deployment..."
            docker-compose -f docker-compose.prod.yml ps

            echo "Cleaning up unused Docker resources..."
            docker system prune -f

            echo "Logging out of GitHub Container Registry..."
            docker logout ghcr.io

            echo "Deployment completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_CALENDAR_ID: ${{ secrets.GOOGLE_CALENDAR_ID }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
