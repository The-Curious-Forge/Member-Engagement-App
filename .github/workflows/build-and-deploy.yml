name: Build and Deploy

on:
  push:
    branches: [main, live]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=live,enable=${{ github.ref == 'refs/heads/live' }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/frontend
          file: ./packages/frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=live,enable=${{ github.ref == 'refs/heads/live' }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/backend
          file: ./packages/backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/live' && github.event_name == 'push'

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 10m
          envs: GITHUB_TOKEN,GITHUB_ACTOR,GITHUB_REPOSITORY
          script: |
            echo "Starting deployment..."
            cd /opt/member-engagement-app || { echo "Application directory not found"; exit 1; }

            echo "Logging into GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            echo "Creating deployment-specific docker-compose file with live tags..."
            # Create docker-compose.deploy.yml with hardcoded live tags
            cat > docker-compose.deploy.yml << 'EOF'
            services:
              traefik:
                image: traefik:v3.0
                container_name: traefik
                restart: unless-stopped
                command:
                  - --api.dashboard=true
                  - --api.insecure=true
                  - --providers.docker=true
                  - --providers.docker.exposedbydefault=false
                  - --entrypoints.web.address=:80
                  - --entrypoints.websecure.address=:443
                  - --certificatesresolvers.letsencrypt.acme.email=supportag@thecuriousforge.org
                  - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
                  - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
                  - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
                  - --log.level=INFO
                  - --accesslog=true
                ports:
                  - "80:80"
                  - "443:443"
                  - "8080:8080"
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - traefik-acme:/data
                networks:
                  - traefik
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.traefik.rule=Host(\`traefik.thecuriousforge.org\`)"
                  - "traefik.http.routers.traefik.entrypoints=websecure"
                  - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
                  - "traefik.http.routers.traefik.service=api@internal"
                  - "traefik.http.routers.http-catchall.rule=hostregexp(\`{host:.+}\`)"
                  - "traefik.http.routers.http-catchall.entrypoints=web"
                  - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
                  - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

              backend:
                image: ghcr.io/$GITHUB_REPOSITORY-backend:live
                container_name: member-engagement-backend
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - PORT=3000
                  - AIRTABLE_API_KEY=${AIRTABLE_API_KEY}
                  - AIRTABLE_BASE_ID=${AIRTABLE_BASE_ID}
                  - GOOGLE_API_KEY=${GOOGLE_API_KEY}
                  - GOOGLE_CALENDAR_ID=${GOOGLE_CALENDAR_ID}
                  - CORS_ORIGIN=https://signin.thecuriousforge.org
                networks:
                  - traefik
                  - app-network
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.backend.rule=Host(\`signin.thecuriousforge.org\`) && PathPrefix(\`/api\`)"
                  - "traefik.http.routers.backend.entrypoints=websecure"
                  - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
                  - "traefik.http.routers.backend.priority=2"
                  - "traefik.http.services.backend.loadbalancer.server.port=3000"
                  - "traefik.docker.network=member-engagement-app_traefik"

              frontend:
                image: ghcr.io/$GITHUB_REPOSITORY-frontend:live
                container_name: member-engagement-frontend
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - PORT=3000
                networks:
                  - traefik
                  - app-network
                depends_on:
                  - backend
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.frontend.rule=Host(\`signin.thecuriousforge.org\`)"
                  - "traefik.http.routers.frontend.entrypoints=websecure"
                  - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
                  - "traefik.http.routers.frontend.priority=1"
                  - "traefik.http.services.frontend.loadbalancer.server.port=3000"
                  - "traefik.docker.network=member-engagement-app_traefik"
                deploy:
                  resources:
                    limits:
                      memory: 512M
                      cpus: "0.5"
                    reservations:
                      memory: 256M
                      cpus: "0.25"

              portainer:
                image: portainer/portainer-ce:latest
                container_name: portainer
                restart: unless-stopped
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - portainer-data:/data
                networks:
                  - traefik
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.portainer.rule=Host(\`portainer.thecuriousforge.org\`)"
                  - "traefik.http.routers.portainer.entrypoints=websecure"
                  - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
                  - "traefik.http.services.portainer.loadbalancer.server.port=9000"
                  - "traefik.docker.network=member-engagement-app_traefik"

              watchtower:
                image: containrrr/watchtower:latest
                container_name: watchtower
                restart: unless-stopped
                environment:
                  - WATCHTOWER_CLEANUP=true
                  - WATCHTOWER_POLL_INTERVAL=300
                  - WATCHTOWER_INCLUDE_RESTARTING=true
                  - WATCHTOWER_ROLLING_RESTART=true
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                networks:
                  - app-network
                command: --interval 300 member-engagement-backend member-engagement-frontend

            volumes:
              traefik-acme:
              portainer-data:

            networks:
              traefik:
                driver: bridge
              app-network:
                driver: bridge
            EOF

            echo "Created docker-compose.deploy.yml with live image tags:"
            grep "image:" docker-compose.deploy.yml

            echo "Stopping existing containers..."
            docker-compose -f docker-compose.deploy.yml down

            echo "Removing old images to force fresh pull..."
            docker image rm "ghcr.io/$GITHUB_REPOSITORY-frontend:live" 2>/dev/null || true
            docker image rm "ghcr.io/$GITHUB_REPOSITORY-backend:live" 2>/dev/null || true
            docker image rm "ghcr.io/$GITHUB_REPOSITORY-frontend:latest" 2>/dev/null || true
            docker image rm "ghcr.io/$GITHUB_REPOSITORY-backend:latest" 2>/dev/null || true

            echo "Pulling latest Docker images with tag: live..."
            docker-compose -f docker-compose.deploy.yml pull

            echo "Starting services with fresh images..."
            docker-compose -f docker-compose.deploy.yml up -d

            echo "Waiting for services to be ready..."
            sleep 15

            echo "Verifying deployment..."
            docker-compose -f docker-compose.deploy.yml ps

            echo "Cleaning up deployment file..."
            rm docker-compose.deploy.yml

            echo "Cleaning up unused Docker resources..."
            docker system prune -f

            echo "Logging out of GitHub Container Registry..."
            docker logout ghcr.io

            echo "Deployment completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
